plugins {
	id 'base'
	id 'maven-publish'
	id 'org.springframework.restdocs.conventions'
}

allprojects {
	group = "org.springframework.restdocs"
	repositories {
		mavenCentral()
		maven {
			url = "https://repo.spring.io/milestone"
			content {
				includeGroup "io.micrometer"
				includeGroup "io.projectreactor"
				includeGroup "org.springframework"
			}
		}
		if (version.endsWith('-SNAPSHOT')) {
			maven { url = "https://repo.spring.io/snapshot" }
		}
	}
}

task api (type: Javadoc) {
	group = "Documentation"
	description = "Generates aggregated Javadoc API documentation."
	project.rootProject.gradle.projectsEvaluated {
		Set<String> excludedProjects = ['spring-restdocs-asciidoctor']
		Set<Project> publishedProjects = rootProject.subprojects.findAll { it != project}
			.findAll { it.plugins.hasPlugin(JavaPlugin) && it.plugins.hasPlugin(MavenPublishPlugin) }
			.findAll { !excludedProjects.contains(it.name) }
		dependsOn publishedProjects.javadoc
		source publishedProjects.javadoc.source
		classpath = project.files(publishedProjects.javadoc.classpath)
		destinationDir = project.file "${buildDir}/docs/javadoc"
		options {
			author = true
			docTitle = "Spring REST Docs ${project.version} API"
			encoding = "UTF-8"
			memberLevel = "protected"
			outputLevel = "quiet"
			source = "17"
			splitIndex = true
			use = true
			windowTitle = "Spring REST Docs ${project.version} API"
		}
	}
}

task docsZip(type: Zip, dependsOn: [":docs:asciidoctor", ":api"]) {
	group = "Distribution"
	archiveBaseName = "spring-restdocs"
	archiveClassifier = "docs"
	description = "Builds -${archiveClassifier} archive containing API and reference documentation"
	destinationDirectory = file("${project.buildDir}/distributions")

	from(project.tasks.findByPath(":docs:asciidoctor")) {
		into "reference/htmlsingle"
	}

	from(api) {
		into "api"
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact docsZip
		}
	}
}
