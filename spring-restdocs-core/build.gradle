plugins {
	id "java-library"
	id "java-test-fixtures"
	id "maven-publish"
	id "optional-dependencies"
}

description = "Spring REST Docs Core"

configurations {
	jarjar
	jmustache
	testArtifacts.extendsFrom testRuntime
}

task jmustacheRepackJar(type: Jar) { repackJar ->
	repackJar.archiveBaseName = "restdocs-jmustache-repack"
	repackJar.archiveVersion = jmustacheVersion

	doLast() {
		ant {
			taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask",
				classpath: configurations.jarjar.asPath
			jarjar(destfile: repackJar.archiveFile.get()) {
				configurations.jmustache.each { originalJar ->
					zipfileset(src: originalJar, includes: "**/*.class")
				}
				rule(pattern: "com.samskivert.**", result: "org.springframework.restdocs.@1")
			}
		}
	}
}

dependencies {
	compileOnly("org.apiguardian:apiguardian-api")

	implementation("com.fasterxml.jackson.core:jackson-databind")
	implementation("org.springframework:spring-web")
	implementation(files(jmustacheRepackJar))

	internal(platform(project(":spring-restdocs-platform")))

	jarjar("com.googlecode.jarjar:jarjar:1.3")

	jmustache(platform(project(":spring-restdocs-platform")))
	jmustache("com.samskivert:jmustache@jar")

	optional(platform(project(":spring-restdocs-platform")))
	optional("jakarta.validation:jakarta.validation-api")
	optional("org.hibernate.validator:hibernate-validator")
	optional("org.junit.jupiter:junit-jupiter-api")

	testFixturesApi(platform(project(":spring-restdocs-platform")))
	testFixturesApi("org.assertj:assertj-core")
	testFixturesApi("org.junit.jupiter:junit-jupiter")
	testFixturesApi("org.mockito:mockito-core")

	testFixturesCompileOnly("org.apiguardian:apiguardian-api")

	testFixturesImplementation(files(jmustacheRepackJar))
	testFixturesImplementation("org.hamcrest:hamcrest-library")
	testFixturesImplementation("org.mockito:mockito-core")
	testFixturesImplementation("org.springframework:spring-core")
	testFixturesImplementation("org.springframework:spring-web")
	
	testFixturesRuntimeOnly("org.junit.platform:junit-platform-launcher")

	testCompileOnly("org.apiguardian:apiguardian-api")

	testImplementation("org.assertj:assertj-core")
	testImplementation("org.javamoney:moneta")
	testImplementation("org.mockito:mockito-core")
	testImplementation("org.springframework:spring-test")

	testRuntimeOnly("org.apache.tomcat.embed:tomcat-embed-el")
	testRuntimeOnly("org.junit.platform:junit-platform-engine")
}

jar {
	dependsOn jmustacheRepackJar
	from(zipTree(jmustacheRepackJar.archiveFile.get())) {
		include "org/springframework/restdocs/**"
	}
}

components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) {
	skip()
}

components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) {
	skip()
}

tasks.named("test") {
	useJUnitPlatform()
}
